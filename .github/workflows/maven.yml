# The name of the workflow.
name: Maven Build and Sign

# Trigger this workflow on a push
on: [push]

# Create an environment variable
env:
  PROJECT_NAME: HelloWorld
  PROJECT_VERSION: 0.0.1

# Defines a single job named "build-and-sign-jar"
jobs:
  build-and-sign-jar:
    # Run job on Ubuntu Runner
    runs-on: ubuntu-latest
    # When the workflow runs, this is the name that is logged
    name: CodeSigner on Java with Maven
    steps:
      # 1) Check out the source code so that the workflow can access it.
      - name: Checkout Repository
        uses: actions/checkout@v2

      # 2) Set up the Java and Maven environment for the workflow to use.
      - name: Setup Java and Maven
        uses: s4u/setup-maven-action@v1.3.1
        with:
          java-version: 17
          maven-version: 3.8.5

      # 3) Create Artifact Directory to store signed and unsigned artifact files
      - name: Create Artifacts Directory
        shell: bash
        run: |
          mkdir ${GITHUB_WORKSPACE}/artifacts
          mkdir ${GITHUB_WORKSPACE}/packages

      # 4) Build a maven project or solution and all of its dependencies.
      #    After it has been created jar file, copy to 'packages' folder for siging
      - name: Compile Java Library with Maven
        shell: bash
        run: |
          mvn clean install -f pom.xml
          cp target/${{env.PROJECT_NAME}}-${{env.PROJECT_VERSION}}.jar ${GITHUB_WORKSPACE}/packages/${{env.PROJECT_NAME}}-${{env.PROJECT_VERSION}}.jar

      # 5) This is the step where the created JAR (artifact) files will be signed with CodeSignTool.
      - name: Sign Artifact with CodeSignTool
        uses: sslcom/actions-codesigner@develop
        with:
          # Sign and timestamp code object.
          command: sign
          # SSL.com account username
          username: ${{ secrets.ES_USERNAME }}
          # SSL.com account password.
          password: ${{ secrets.ES_PASSWORD }}
          # Credential ID for signing certificate.
          credential_id: ${{ secrets.CREDENTIAL_ID }}
          # OAuth TOTP Secret (https://www.ssl.com/how-to/automate-esigner-ev-code-signing)
          totp_secret: ${{ secrets.ES_TOTP_SECRET }}
          # Path of code object to be signed. (DLL, JAR, EXE, MSI files vb... )
          file_path: ${GITHUB_WORKSPACE}/packages/${{env.PROJECT_NAME}}.jar
          # Directory where signed code object(s) will be written.
          output_path: ${GITHUB_WORKSPACE}/artifacts
          # Scan code before sign
          malware_block: false
          # Environment Name, For Production 'PROD' or For Staging 'DEV'
          environment_name: DEV

        # 6) This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete
      - name: Upload Signed Files
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.PROJECT_NAME}}-${{env.PROJECT_VERSION}}.jar
          path: ./artifacts/${{env.PROJECT_NAME}}.jar